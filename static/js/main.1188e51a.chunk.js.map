{"version":3,"sources":["components/Card/Card.js","components/CardContainer/CardContainer.js","components/Crawl/Crawl.js","components/Buttons/Buttons.js","components/Header/Header.js","apiCalls/apiCalls.js","components/App/helperFunctions.js","components/App/App.js","index.js"],"names":["Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","_this$props","props","addFavorite","removeFavorite","id","favorited","state","setState","_this2","favBtnText","index","cardData","keys","map","key","react_default","a","createElement","className","onClick","Component","CardContainer","_ref","items","favorites","currentDisplay","cards","item","find","fav","components_Card_Card","assign","length","Crawl","film","title","opening_crawl","release_date","Buttons","changeCategory","totalFavorites","name","Header","src","alt","components_Buttons_Buttons","fetchData","url","fetch","then","response","ok","json","Error","getCategories","unresolvedPromises","Promise","all","createPeople","people","person","homeworld","species","newPerson","Name","Date","now","pendingPromises","results","Species","Homeworld","Population","population","createPerson","createPlanets","planets","planet","climate","terrain","residents","Climate","Terrain","Residents","createPlanet","createVehicles","vehicles","vehicle","model","vehicle_class","passengers","Model","Class","Passenger Capacity","createVehicle","setLocalStorage","JSON","stringify","localStorage","setItem","App","componentDidUpdate","componentDidMount","getItem","objectSpread","parse","randomFilmNum","Math","floor","random","concat","loaded","catch","error","message","categories","target","_this$state","newFavorite","toConsumableArray","element","filter","favorite","render","_this$state2","mainContent","components_Crawl_Crawl","components_CardContainer_CardContainer","components_Header_Header","ReactDOM","components_App_App","document","getElementById"],"mappings":"gXAmDeA,qBA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWFI,YAAc,SAACC,GAAM,IAAAC,EACuBT,EAAKU,MAAxCC,EADYF,EACZE,YAAaC,EADDH,EACCG,eAAgBC,EADjBJ,EACiBI,GAC9BC,GAAad,EAAKe,MAAMD,UAC9BA,EAAYH,EAAYE,GAAMD,EAAeC,GAC7Cb,EAAKgB,SAAS,CAAEF,eAdhBd,EAAKe,MAAQ,CACXD,WAAW,GAHDd,mFAOM,IACXc,EAAaX,KAAKO,MAAlBI,UACPX,KAAKa,SAAS,CAACF,+CAUR,IAAAG,EAAAd,KACDW,EAAYX,KAAKY,MAAMD,UAAY,YAAc,GACjDI,EAAaf,KAAKY,MAAMD,UAAY,aAAe,WACrDK,EAAQ,EACNC,EAAWnB,OAAOoB,KAAKlB,KAAKO,OAAOY,IAAI,SAACC,GAO5C,OANAJ,GAAS,EAEC,OAARI,GACQ,gBAARA,GACQ,mBAARA,GACQ,cAARA,GACqBC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,MAAIH,IAAKJ,GAAQI,GAASC,EAAAC,EAAAC,cAAA,aAAKT,EAAKP,MAAMa,OAGxE,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAW,QAAUb,GAC3BM,EACDI,EAAAC,EAAAC,cAAA,UAAQE,QAASzB,KAAKI,aAAcW,WArCzBW,cCoCJC,SAnCO,SAAAC,GAAqE,IAAnEC,EAAmED,EAAnEC,MAAOC,EAA4DF,EAA5DE,UAAWtB,EAAiDoB,EAAjDpB,YAAaC,EAAoCmB,EAApCnB,eAAgBsB,EAAoBH,EAApBG,eACjEC,EAAQH,EAAMV,IAAI,SAACc,EAAMjB,GAC3B,IAAML,IAAcmB,EAAUI,KAAK,SAAAC,GACjC,OAAOA,EAAIzB,KAAOuB,EAAKvB,KAEzB,OAAOW,EAAAC,EAAAC,cAACa,EAADtC,OAAAuC,OAAA,GACDJ,EADC,CAELtB,UAAWA,EACXH,YAAaA,EACbC,eAAgBA,EAChBW,IAAKa,EAAKvB,GAAKM,OAOnB,MAJsB,cAAnBe,GAAuD,IAArBD,EAAUQ,SAC7CN,EAAQX,EAAAC,EAAAC,cAAA,sCAIRF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBO,GAChCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZQ,MCPMO,SAfD,SAAAX,GAAY,IAAVY,EAAUZ,EAAVY,KACPC,EAAsCD,EAAtCC,MAAOC,EAA+BF,EAA/BE,cAAeC,EAAgBH,EAAhBG,aAC7B,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAKkB,GACLpB,EAAAC,EAAAC,cAAA,UAAKmB,GACLrB,EAAAC,EAAAC,cAAA,4BAAoBoB,MCUXC,SAhBC,SAAAhB,GAAsC,IAApCiB,EAAoCjB,EAApCiB,eAAgBC,EAAoBlB,EAApBkB,eAChC,OACEzB,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,UAAQwB,KAAK,SAAStB,QAAS,SAACpB,GAAD,OAAOwC,EAAexC,KAArD,UACAgB,EAAAC,EAAAC,cAAA,UAAQwB,KAAK,UAAUtB,QAAS,SAACpB,GAAD,OAAOwC,EAAexC,KAAtD,WACAgB,EAAAC,EAAAC,cAAA,UAAQwB,KAAK,WAAWtB,QAAS,SAACpB,GAAD,OAAOwC,EAAexC,KAAvD,YACAgB,EAAAC,EAAAC,cAAA,UAAQwB,KAAK,YAAYtB,QAAS,SAACpB,GAAD,OAAOwC,EAAexC,KAAxD,kBAA4EyC,MCYnEE,SAjBA,SAAApB,GAAsC,IAApCkB,EAAoClB,EAApCkB,eAAgBD,EAAoBjB,EAApBiB,eAC/B,OACExB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAK0B,IAAI,6EAA6EC,IAAI,wBAC9F7B,EAAAC,EAAAC,cAAC4B,EAAD,CACEL,eAAgBA,EAChBD,eAAgBA,OCXXO,EAAY,SAACC,GACxB,OAAOC,MAAMD,GAAKE,KAAK,SAAAC,GACrB,GAAIA,EAASC,GAGX,OAAOD,EAASE,OAFhB,MAAMC,MAAK,0BAOJC,EAAgB,WAC3B,IAKMC,EALe,CACnB,8BACA,+BACA,iCAEsC1C,IAAI,SAAAkC,GAC1C,OAAOD,EAAUC,KAEnB,OAAOS,QAAQC,IAAIF,ICjBd,SAASG,EAAaC,GAC3B,OAAOA,EAAO9C,IAAI,SAAC+C,EAAQlD,GACzB,OAsCJ,SAAsBkD,EAAQlD,GAAO,IAC5BmD,EAA4BD,EAA5BC,UAAWpB,EAAiBmB,EAAjBnB,KAAMqB,EAAWF,EAAXE,QAClBC,EAAY,CAChBC,KAAMvB,EACNrC,GAAI6D,KAAKC,MAAQ,IAAOxD,GAEpByD,EAAkB,CAACrB,EAAUe,GAAYf,EAAUgB,IACzD,OAAON,QAAQC,IAAIU,GAAiBlB,KAAK,SAAAmB,GAIvC,OAHAL,EAAUM,QAAUD,EAAQ,GAAG3B,KAC/BsB,EAAUO,UAAYF,EAAQ,GAAG3B,KACjCsB,EAAUQ,WAAaH,EAAQ,GAAGI,WAC3BT,IAjDAU,CAAab,EAAQlD,KAIzB,SAASgE,EAAcC,GAC5B,OAAOA,EAAQ9D,IAAI,SAAC+D,EAAQlE,GAC1B,OAmBJ,SAAsBkE,EAAQlE,GAAO,IAC9BmE,EAAiDD,EAAjDC,QAASpC,EAAwCmC,EAAxCnC,KAAMqC,EAAkCF,EAAlCE,QAASN,EAAyBI,EAAzBJ,WAAYO,EAAaH,EAAbG,UAEzC,OADAA,EAAYA,EAAU/C,OACf,CACLgC,KAAMvB,EACNrC,GAAI6D,KAAKC,MAAQ,IAAOxD,EACxBsE,QAASH,EACTI,QAASH,EACTP,WAAYC,EACZU,UAAWH,GA5BJI,CAAaP,EAAQlE,KAIzB,SAAS0E,EAAeC,GAC7B,OAAOA,EAASxE,IAAI,SAACyE,EAAS5E,GAC5B,OAyCJ,SAAuB4E,EAAS5E,GAAO,IAC9B+B,EAA0C6C,EAA1C7C,KAAM8C,EAAoCD,EAApCC,MAAOC,EAA6BF,EAA7BE,cAAeC,EAAcH,EAAdG,WACnC,MAAO,CACLzB,KAAMvB,EACNrC,GAAI6D,KAAKC,MAAQ,IAAOxD,EACxBgF,MAAOH,EACPI,MAAOH,EACPI,qBAAsBH,GAhDfI,CAAcP,EAAS5E,KAQ3B,SAASoF,EAAgBxF,GAC9BA,EAAQyF,KAAKC,UAAU1F,GACvB2F,aAAaC,QAAQ,QAAS5F,OCsGjB6F,cAhHb,SAAAA,IAAc,IAAA5G,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyG,IACZ5G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2G,GAAAtG,KAAAH,QAcF0G,mBAAqB,WACnBN,EAAgBvG,EAAKe,QAhBTf,EAmBd8G,kBAAoB,WAClB,GAAGJ,aAAaK,QAAQ,SACtB,OAAO/G,EAAKgB,SAALf,OAAA+G,EAAA,EAAA/G,CAAA,GDhBJuG,KAAKS,MAAMP,aAAaK,QAAQ,YCkBrC,IAAMG,EAAgBC,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,GACrD9D,EAAS,8BAAA+D,OAA+BJ,IACvCxD,KAAK,SAAAf,GAAI,OAAI3C,EAAKgB,SAAS,CAAE2B,OAAM4E,QAAQ,MAC3CC,MAAM,SAAAC,GAAK,OAAIzH,EAAKgB,SAAS,CAAEyG,MAAOA,EAAMC,YAE7C3D,IACCL,KAAK,SAAAiE,GACJ,IAAIvD,EAASuD,EAAW,GAAG9C,QACvBO,EAAUuC,EAAW,GAAG9C,QACxBiB,EAAW6B,EAAW,GAAG9C,QAE7BT,EAASD,EAAaC,GACtBgB,EAAUD,EAAcC,GACxBU,EAAWD,EAAeC,GAE1B7B,QAAQC,IAAIE,GAAQV,KAAK,SAAAU,GACvBpE,EAAKgB,SAAS,CAAEoD,SAAQgB,UAASU,aACjCS,EAAgBvG,EAAKe,YAxCbf,EA6CdgD,eAAiB,SAACxC,GAChBR,EAAKgB,SAAS,CAACkB,eAAgB1B,EAAEoH,OAAO1E,QA9C5BlD,EAiDdW,YAAc,SAACE,GACb,IAAGb,EAAKe,MAAMkB,UAAUI,KAAK,SAAAC,GAAG,OAAIA,EAAIzB,KAAOA,IAA/C,CADoB,IAAAgH,EAIgB7H,EAAKe,MAAlCqD,EAJayD,EAIbzD,OAAQgB,EAJKyC,EAILzC,QAASU,EAJJ+B,EAII/B,SAElBgC,EADO,GAAAR,OAAArH,OAAA8H,EAAA,EAAA9H,CAAOmE,GAAPnE,OAAA8H,EAAA,EAAA9H,CAAkBmF,GAAlBnF,OAAA8H,EAAA,EAAA9H,CAA8B6F,IACfzD,KAAK,SAAA2F,GAC/B,OAAOA,EAAQnH,KAAOA,IAElBoB,EAAS,GAAAqF,OAAArH,OAAA8H,EAAA,EAAA9H,CAAOD,EAAKe,MAAMkB,WAAlB,CAA6B6F,IAC5C9H,EAAKgB,SAAS,CAAEiB,gBA3DJjC,EA8DdY,eAAiB,SAACC,GAChB,IAAMoB,EAAYjC,EAAKe,MAAMkB,UAAUgG,OAAO,SAAAC,GAC5C,OAAOA,EAASrH,KAAOA,IAEzBb,EAAKgB,SAAS,CAAEiB,eAlEJjC,EAqEdmI,OAAS,WAAM,IAAAC,EACiCpI,EAAKe,MAA5CwG,EADMa,EACNb,OAAQrF,EADFkG,EACElG,eAAgBS,EADlByF,EACkBzF,KAAM8E,EADxBW,EACwBX,MACjCY,EAAc,aAkBlB,OAjBId,IAEAc,EADqB,UAAnBnG,EACYV,EAAAC,EAAAC,cAAC4G,EAAD,CAAO3F,KAAMA,IAEbnB,EAAAC,EAAAC,cAAC6G,EAAD,CACZ5H,YAAaX,EAAKW,YAClBC,eAAgBZ,EAAKY,eACrBoB,MAAOhC,EAAKe,MAAMmB,GAClBD,UAAWjC,EAAKe,MAAMkB,UACtBC,eAAgBA,KAIlBuF,IACFY,EAAc7G,EAAAC,EAAAC,cAAA,UAAK+F,IAInBjG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8G,EAAD,CACEvF,eAAgBjD,EAAKe,MAAMkB,UAAUQ,OACrCO,eAAgBhD,EAAKgD,iBAEtBqF,IA5FLrI,EAAKe,MAAQ,CACXwG,QAAQ,EACRrF,eAAgB,QAChBS,KAAM,GACNyB,OAAQ,GACRgB,QAAS,GACTU,SAAU,GACV7D,UAAW,GACXwF,MAAO,IAXGzH,6BADE6B,aCTlB4G,IAASN,OAAO3G,EAAAC,EAAAC,cAACgH,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.1188e51a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './_Card.scss';\nimport PropTypes from 'prop-types';\n\nclass Card extends Component {\n  constructor() {\n    super();\n    this.state = {\n      favorited: false\n    }\n  }\n\n  componentDidMount() {\n    const {favorited} = this.props\n    this.setState({favorited})\n  }\n\n  handleClick = (e) => {\n    const {addFavorite, removeFavorite, id} = this.props;\n    const favorited = !this.state.favorited;\n    favorited ? addFavorite(id) : removeFavorite(id);\n    this.setState({ favorited });\n  }\n\n  render() {\n    const favorited = this.state.favorited ? 'favorited' : '';\n    const favBtnText = this.state.favorited ? 'Unfavorite' : 'Favorite';\n    let index = 0;\n    const cardData = Object.keys(this.props).map((key) => {\n      index += 1;\n      const ifKeyAllowed = \n        key !== 'id' && \n        key !== 'addFavorite' &&\n        key !== 'removeFavorite' &&\n        key !== 'favorited';\n      return ifKeyAllowed && <div><h4 key={index}>{key}</h4><p> {this.props[key]}</p></div>;\n    });\n    \n    return (\n      <article className={\"Card \" + favorited}>\n        {cardData}\n        <button onClick={this.handleClick}>{favBtnText}</button>  \n      </article>\n    )\n  }\n}\n\nCard.propTypes = {\n  favorited: PropTypes.bool\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../Card/Card';\nimport './_CardContainer.scss';\nimport PropTypes from 'prop-types';\n\nconst CardContainer = ({items, favorites, addFavorite, removeFavorite, currentDisplay}) => {\n  let cards = items.map((item, index) => {\n    const favorited = !!favorites.find(fav => {\n      return fav.id === item.id \n    })\n    return <Card \n      {...item}\n      favorited={favorited} \n      addFavorite={addFavorite}\n      removeFavorite={removeFavorite} \n      key={item.id + index} />\n  });\n\n  if(currentDisplay === 'favorites' && favorites.length === 0) {\n    cards = <h2>No Favorites To Display</h2>\n  }\n\n  return (\n    <div>\n      <h2 className=\"currentDisplay\">{currentDisplay}</h2>\n      <div className=\"CardContainer\">\n        {cards}\n      </div>\n    </div>\n  )\n}\n\nCardContainer.propTypes = {\n  addFavorite: PropTypes.func,\n  removeFavorite: PropTypes.func,\n  items: PropTypes.array,\n  favorites: PropTypes.array,\n  currentDisplay: PropTypes.string\n}\n\nexport default CardContainer;","import React from 'react';\nimport './_Crawl.scss';\nimport PropTypes from 'prop-types';\n\nconst Crawl = ({film}) => {\n  const {title, opening_crawl, release_date} = film;\n  return (\n    <div className=\"Crawl\">\n      <h2>{title}</h2>\n      <h3>{opening_crawl}</h3>\n      <h3>Film Released: {release_date}</h3>\n    </div>\n  )\n}\n\nCrawl.propTypes = {\n  film: PropTypes.object\n}\n\nexport default Crawl;","import React from 'react';\nimport './_Buttons.scss';\nimport PropTypes from 'prop-types';\n\nconst Buttons = ({changeCategory, totalFavorites}) => {\n  return (\n    <section className=\"Buttons\">\n      <button name=\"people\" onClick={(e) => changeCategory(e)}>People</button>\n      <button name=\"planets\" onClick={(e) => changeCategory(e)}>Planets</button>\n      <button name=\"vehicles\" onClick={(e) => changeCategory(e)}>Vehicles</button>\n      <button name=\"favorites\" onClick={(e) => changeCategory(e)}>View Favorites {totalFavorites}</button>\n    </section>\n  )\n}\n\nButtons.propTypes = {\n  changeCategory: PropTypes.func,\n  totalFavorites: PropTypes.number\n}\n\nexport default Buttons;","import React from 'react';\nimport Buttons from '../Buttons/Buttons';\nimport './_Header.scss'\nimport PropTypes from 'prop-types';\n\nconst Header = ({totalFavorites, changeCategory}) => {\n  return (\n    <header className='Header'>\n      <h1><img src=\"https://fontmeme.com/permalink/190506/2f9decc54ab5c68a61423e6ffce47f73.png\" alt=\"star-wars-api-font\" /></h1>\n      <Buttons \n        totalFavorites={totalFavorites} \n        changeCategory={changeCategory} \n      />\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  totalFavorites: PropTypes.number,\n  changeCategory: PropTypes.func\n}\n\nexport default Header;","export const fetchData = (url) => {\n  return fetch(url).then(response => {\n    if(!response.ok) {\n      throw Error(`Error fetching data`);\n    } else {\n      return response.json();\n    }\n  })\n}\n\nexport const getCategories = () => {\n  const categoryUrls = [\n    'https://swapi.co/api/people',\n    'https://swapi.co/api/planets',\n    'https://swapi.co/api/vehicles'\n  ];\n  const unresolvedPromises = categoryUrls.map(url => {\n    return fetchData(url)\n  });\n  return Promise.all(unresolvedPromises);\n}","import {fetchData} from '../../apiCalls/apiCalls'\n\nexport function createPeople(people) {\n  return people.map((person, index) => {\n    return createPerson(person, index);\n  });\n}\n\nexport function createPlanets(planets) {\n  return planets.map((planet, index) => {\n    return createPlanet(planet, index)\n  });\n}\n\nexport function createVehicles(vehicles) {\n  return vehicles.map((vehicle, index) => {\n    return createVehicle(vehicle, index)\n  });\n}\n\nexport function getLocalStorage() {\n  return JSON.parse(localStorage.getItem('state'));\n}\n\nexport function setLocalStorage(state) {\n  state = JSON.stringify(state);\n  localStorage.setItem('state', state);\n}\n\nfunction createPlanet(planet, index) {\n  let {climate, name, terrain, population, residents} = planet;\n  residents = residents.length;\n  return {\n    Name: name,\n    id: Date.now() + 2000 + index,\n    Climate: climate,\n    Terrain: terrain,\n    Population: population,\n    Residents: residents\n  };\n}\n\nfunction createPerson(person, index) {\n  const {homeworld, name, species} = person;\n  const newPerson = {\n    Name: name,\n    id: Date.now() + 4000 + index\n  };\n  const pendingPromises = [fetchData(homeworld), fetchData(species)];\n  return Promise.all(pendingPromises).then(results => {\n    newPerson.Species = results[1].name;\n    newPerson.Homeworld = results[0].name;\n    newPerson.Population = results[0].population;\n    return newPerson;\n  })\n}\n\nfunction createVehicle(vehicle, index) {\n  const {name, model, vehicle_class, passengers} = vehicle;\n  return {\n    Name: name,\n    id: Date.now() + 6000 + index,\n    Model: model,\n    Class: vehicle_class,\n    \"Passenger Capacity\": passengers \n  }\n}","import React, { Component } from 'react';\nimport './_App.scss';\nimport CardContainer from '../CardContainer/CardContainer';\nimport Crawl from '../Crawl/Crawl';\nimport Header from '../Header/Header';\nimport PropTypes from 'prop-types';\nimport { fetchData, getCategories } from '../../apiCalls/apiCalls.js';\nimport { \n  createPeople,\n  createPlanets,\n  createVehicles,\n  getLocalStorage,\n  setLocalStorage\n} from './helperFunctions.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      loaded: false,\n      currentDisplay: 'crawl',\n      film: {},\n      people: [],\n      planets: [],\n      vehicles: [],\n      favorites: [],\n      error: ''\n    };\n  }\n\n  componentDidUpdate = () => {\n    setLocalStorage(this.state)\n  }\n\n  componentDidMount = () => {\n    if(localStorage.getItem('state')) {\n      return this.setState({...getLocalStorage()});\n    }\n    const randomFilmNum = Math.floor(Math.random() * 1 + 1);\n    fetchData(`https://swapi.co/api/films/${randomFilmNum}`)\n    .then(film => this.setState({ film, loaded: true }))\n    .catch(error => this.setState({ error: error.message }))\n    \n    getCategories()\n    .then(categories => { \n      let people = categories[0].results;\n      let planets = categories[1].results;\n      let vehicles = categories[2].results;\n      \n      people = createPeople(people);\n      planets = createPlanets(planets);\n      vehicles = createVehicles(vehicles);\n      \n      Promise.all(people).then(people => {\n        this.setState({ people, planets, vehicles })\n        setLocalStorage(this.state)\n      })\n    })\n  }\n\n  changeCategory = (e) => {\n    this.setState({currentDisplay: e.target.name});\n  }\n\n  addFavorite = (id) => {\n    if(this.state.favorites.find(fav => fav.id === id)) {\n      return;\n    }\n    const {people, planets, vehicles} = this.state;\n    const allData = [...people, ...planets, ...vehicles];\n    const newFavorite = allData.find(element => {\n      return element.id === id;\n    })\n    const favorites = [...this.state.favorites, newFavorite];\n    this.setState({ favorites });\n  }\n\n  removeFavorite = (id) => {\n    const favorites = this.state.favorites.filter(favorite => {\n      return favorite.id !== id;\n    }) \n    this.setState({ favorites });\n  }\n\n  render = () => {\n    const {loaded, currentDisplay, film, error} = this.state;\n    let mainContent = 'Loading...';\n    if (loaded) {\n      if (currentDisplay === 'crawl') {\n        mainContent = <Crawl film={film} />;\n      } else {\n        mainContent = <CardContainer \n          addFavorite={this.addFavorite}\n          removeFavorite={this.removeFavorite} \n          items={this.state[currentDisplay]}\n          favorites={this.state.favorites}\n          currentDisplay={currentDisplay}\n        />;\n      }\n    }\n    if (error) {\n      mainContent = <h1>{error}</h1>;\n    }\n\n    return (\n      <div className=\"App\">\n        <Header \n          totalFavorites={this.state.favorites.length}\n          changeCategory={this.changeCategory}\n        />\n        {mainContent}\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  loaded: PropTypes.bool,\n  currentDisplay: PropTypes.string,\n  film: PropTypes.object,\n  people: PropTypes.array,\n  planets: PropTypes.array,\n  vehicles: PropTypes.array,\n  favorites: PropTypes.array,\n  error: PropTypes.string\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}